<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Node+Express搭建个人博客（纯后端）-浅析Express脚手架（三）]]></title>
    <url>%2F2018%2F09%2F21%2FNode-Express%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E7%BA%AF%E5%90%8E%E7%AB%AF%EF%BC%89-%E6%B5%85%E6%9E%90Express%E8%84%9A%E6%89%8B%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[既然我们的个人博客项目使用的是Express框架，那我们在项目初始化之前，先从【初始化一个Express项目】说起，分析下默认的Express脚手架。 本文篇幅稍稍有点长，超出了计划，请耐心阅读【手动捂脸】。 初始化一个Express项目在Express框架的官方文档中，是通过生成器工具express-generator快速生成了一个Express应用，相关步骤如下： 安装Express生成器npm install -g express-generator 初始化一个Express应用express express-app 如此便生成了一个名为express-app的Express应用。 Express应用目录结构概览首先来看一下这个Express应用的目录结构，目录结构如下：express-app│ app.js│ package.json│ ├─bin│ www│ ├─public│ ├─images│ ├─javascripts│ └─stylesheets│ style.css│ ├─routes│ index.js│ users.js│ └─views error.jade index.jade layout.jade 目录结构简介 app.js应用的初始化文件，包括引入应用程序的基础依赖项、设置视图即view的引擎目录以及模板、设置静态资源路径、配置通用的中间件、引入路由和一些错误处理中间件等。 package.json应用的配置文件，文件内包含程序的基础信息、启动脚本和依赖包等。 bin/www应用的启动文件，文件内包含引用要启动的应用、设置应用监听的端口和启动http服务等。 public/**应用的静态资源文件目录，该目录下的文件资源不需要经过文件映射就可以直接访问。 routes/**应用的路由文件，这些路由文件中设置的接口最终会以指定的HTTP请求方式暴露给用户，并在用户请求之后将结果返回。 views应用的视图文件，在app.js中设置好视图引擎和模板之后，该目录即为应用视图的根目录，然后路由文件就会根据app.js中的设置加载并渲染该目录下的视图文件。 应用启动首先，先要安装应用的依赖包。npm install 然后，启动程序。node bin/www 查看bin/wwww文件，拷打应用默认监听的端口是3000，然后访问localhost:3000,看到如下界面： 看到上面的页面，说明我们的应用启动成功，并且成功地访问到了视图引擎目录view中的页面。 文件详解app.js文件详解以下是初始化的Express应用中的已经做了一些注释说明后的app.js文件中的代码：// 引入依赖包var createError = require('http-errors');var express = require('express');var path = require('path');var cookieParser = require('cookie-parser');var logger = require('morgan');// 引入路由文件var indexRouter = require('./routes/index');var usersRouter = require('./routes/users');// 创建应用实例var app = express();// 设置视图目录和模板引擎app.set('views', path.join(__dirname, 'views'));app.set('view engine', 'jade');// 以下皆为注册中间件// 内置中间件app.use(logger('dev'));app.use(express.json());app.use(express.urlencoded(&#123; extended: false &#125;));app.use(cookieParser());app.use(express.static(path.join(__dirname, 'public')));// 路由中间件app.use('/', indexRouter);app.use('/users', usersRouter);// 404错误处理中间件app.use(function(req, res, next) &#123; next(createError(404));&#125;);// 错误处理中间件app.use(function(err, req, res, next) &#123; // set locals, only providing error in development res.locals.message = err.message; res.locals.error = req.app.get('env') === 'development' ? err : &#123;&#125;; // render the error page res.status(err.status || 500); res.render('error');&#125;);// 导出app实例对象module.exports = app; 根据代码中的注释，我们可以看到，app.js的作用主要是初始化Express应用的一些设置，包括引入依赖包、引入路由文件、注册各类中间件的一些操作。 www文件详解以下是添加了注释后的应用启动文件bin/www中的代码：#!/usr/bin/env node// 引入依赖var app = require('../app');var debug = require('debug')('express:server');var http = require('http');// 设置应用监听的端口var port = normalizePort(process.env.PORT || '3000');app.set('port', port);// 创建http服务器var server = http.createServer(app);// 监听端口server.listen(port);server.on('error', onError);server.on('listening', onListening);// 格式化应用监听的端口function normalizePort(val) &#123; var port = parseInt(val, 10); if (isNaN(port)) &#123; // named pipe return val; &#125; if (port &gt;= 0) &#123; // port number return port; &#125; return false;&#125;// http的错误监听函数function onError(error) &#123; if (error.syscall !== 'listen') &#123; throw error; &#125; var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port; // handle specific listen errors with friendly messages switch (error.code) &#123; case 'EACCES': console.error(bind + ' requires elevated privileges'); process.exit(1); break; case 'EADDRINUSE': console.error(bind + ' is already in use'); process.exit(1); break; default: throw error; &#125;&#125;// http端口监听函数function onListening() &#123; var addr = server.address(); var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port; debug('Listening on ' + bind);&#125; bin/wwww文件的内容就很简单了，就是创建HTTP服务，监听端口和错误。 router/**详解router/**包含了路由文件，每个路由文件中包含了不同HTTP请求对用的路由以及逻辑处理函数，此处以router/index.js文件为例，以下是index.js文件的代码：// 引入依赖包var express = require('express');// 创建路由对象var router = express.Router();// 获取首页router.get('/', function(req, res, next) &#123; res.render('index', &#123; title: 'Express' &#125;);&#125;);module.exports = router; 路由文件主要相应相应的HTTP请求，然后执行函数进行相应的逻辑处理，以上代码，是对GET请求的响应，然后渲染view目录下的index.jade页面（在app.js中设置了视图目录和模板引擎），同时传递数据{title: &#39;Express&#39;}给index.jade页面。 view/**详解view/**主要存放应用的页面，以view/index.jade为例，代码如下：extends layoutblock content h1= title p Welcome to #&#123;title&#125; 页面文件主要是接收路由文件传递的数据，然后生成渲染后的页面给客户端，在上一步，传递了数据{title: &#39;Express&#39;}给index.jade页面，所以真实的页面应该是如下的代码：extends layoutblock content h1= 'Express' p Welcome to Express 然后客户端就看到了如下的页面： 改进缺点分析在实际开发中，我们项目的路由文件的数目会因项目复杂度而不同，当项目足够复杂时，我们需要引入的路由文件和需要注册的路由就会更多，同时除了应用本身的404和错误处理中间件之外，还可能根据实际需求新增我们自定义的中间件，如果这些初始化的代码都放置于app.js中，无疑，app.js文件会越来越大越来越臃肿，这并不是一个很好的选择。同时路由和路由对应的处理函数在一个文件中，这样的处理不够优雅，不便于维护，所以进行路由分离显得很有必要性。当然，这个应用只是生成器工具初始化的一个简单脚手架，并不是最终的样子。 MVC框架简介MVC框架是一个经典的架构模式，其中MVC分别指的是： M: Model(模型，包含数据和数据处理方法) V: View(视图，提供视图，即页面) Controller: (控制层，负责逻辑处理) 对应的，在Node中的MVC框架，处理流程应该是以下步骤： 服务端收到客户端的请求 路由层开始处理服务端接收到的请求，匹配相应的路由 匹配到相应的路由之后调用对应的controller（即对应的逻辑处理函数） controller接收到请求之后，向model层取用数据 model层接收到controller层取用数据的请求之后，将数据返回给controller层 controller层收到数据之后进行相应的逻辑处理之后，将数据返回给view层 view层收到controller层返回的数据之后，根据相应的视图模板和数据组装之后，返回一个渲染过的页面 服务端将上一步的结果返回给客户端 注：在以上的步骤中，可能会存在执行中间件的情况。 在对Express框架初始化的应用缺点和MVC有了简单了解之后，接下来就是根据以上两步的分析改进这个简单的脚手架应用了。 启动文件和初始化文件合二为一在Express的官方文档中关于app.listen()方法的介绍中，提到： Binds and listens for connections on the specified host and port. This method is identical to Node’s http.Server.listen(). 所以我们完全可以使用app.listen()方法替代bin/www中的代码逻辑，一行代码替代一个应用的启动文件，何乐而不为呢。 既然要合二为一，我们将程序的启动文件和初始化文件都合并到app.js中，这样的话，就不要要导出app对象给其他文件引入使用了，所以，首先删除app.js文件中的module.exports = app;,然后，添加一行代码即可:app.listen(3000) 修改app.js之后，访问localhost:3000,依然可以正常访问到上面的页面，说明修改无误。 抽离路由层参照MVC框架，路由层的工作是根据匹配客户端的请求路径匹配相应的路由然后调用相应的controller，以下代码为示例模板：// 访问首页app.get('/', IndexController.index) 在该小节，我们仅仅抽离出路由层，一步一步的来。 首先，在项目根目录下创建route.js文件,该文件中的代码如下：module.exports = function (app) &#123; app.get(&apos;/&apos;, function(req, res, next) &#123; console.log(&apos;new index&apos;) res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;); &#125;)&#125; 然后在app.js中添加如下代码：var routes = require(&apos;./routes&apos;)routes(app) 注：routes(app)需要在创建应用实例之后，即var app = express()之后。 同时，删除app.js中的// app.use(&#39;/&#39;, indexRouter)。 最后，访问localhost:3000,依然可以正常访问到上面的页面，并且在控制台看到输出的new index,说明修改无误。 抽离controller层首先，在根目录下创建controller/index.js，在index.js中编写如下代码：module.exports = &#123; index (req, res, next) &#123; console.log('controller') res.render('index', &#123; title: 'Express' &#125;); &#125;&#125; 然后，将routes.js修改为如下代码：var IndexController = require('./controller/index')module.exports = function (app) &#123; app.get('/', IndexController.index)&#125; 最后，访问localhost:3000,依然可以正常访问到上面的页面，并且在控制台看到输出的controller,说明修改无误。 抽离middleware层首先，在根目录下创建middlewares/not-find.js，在文件中编写以下代码：var createError = require('http-errors');module.exports = function(req, res, next) &#123; next(createError(404));&#125; 然后在app.js中，引入相关中间件：var notFind = require('./middlewares/not-find') 然后修改404错误处理中间件为：// 404错误处理中间件app.use(notFind); 最后，访问localhost:3000/asasasasasa,这是一个不存在的路径，应该会出现404页面，发现可以正常访问到404页面，说明修改无误。 其他自定义中间件的处理，同理。 小结至此，我们对生成器工具express-generator生成的Express应用的改造完毕，并且接下来初始化自己的应用可以不再使用express-generator，可以根据自己的需求，参照以上修改，进行项目初始化搭建。 下面附上项目的github地址： 项目地址 我的简书： 毛浩先生的简书博客]]></content>
      <categories>
        <category>Node.js学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Node+Express搭建个人博客（纯后端）-开发准备（二）]]></title>
    <url>%2F2018%2F09%2F19%2FNode-Express%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E7%BA%AF%E5%90%8E%E7%AB%AF%EF%BC%89-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[技术栈 平台： Node.js（v8.9.3） 框架：Express（v4.16.0） 数据库：MongoDB（v3.4.14） 开发环境 Node相关：下载链接 MongoDB相关：下载链接 Node与MongoDB的下载与安装，请自行百度或谷歌，遍地都是，不再赘述。 相关规范相关规范主要包括代码规范、Git commit规范和API接口文档规范。 代码规范代码规范采用JavaScript Standard Style,以下简称standard规范。至于为什么使用这个代码规范，没有什么特殊原因，这是我使用过的第一个代码规范，是我规范自己代码的开始，习惯而已，并且github上的start数也不算少。standard规范相比较ESLint而言，最舒服的一点就是不用配置，对我影响最大的一点是代码中再也没有出现分号，并且强迫症再也受不了代码中有分号【捂脸】，以至于后来使用ESLint时，也要配置为可以不写分号【再次捂脸】。 通过代码规范，可以在编程过程中避免一些低级错误，比如使用未定义的变量等，同时可以规范自己的代码书写风格，有了规范代码的习惯，写出来的代码赏心悦目，看着也舒服很多，一定程度上增加了代码的可读性，工作效率的提升也是必然的事情。 我听说过，有的团队的代码规范及其严格，比如一行代码最大字符长度不能超过120甚至80，每个函数的代码行数不能超过50行等，存在必有意义吧，起初没必要对自己这么严格，但是代码规范还是要重视起来的。 工具配合我使用的编辑器是VS Code,可以安装StandardJS插件，非常方便。 同时可以配合一个npm的库包pre-commit进行代码规范，因为不规范的代码是不会影响程序的正常运行的，但我们使用代码规范的目的就是希望提交到代码仓库的代码都是规范的，pre-commit的作用就是在进行commit操作时检测所有代码是否符合standard规范，如果不符合则不允许提交代码。 相关参考在standard规范的文档中，有关于规范的细则和使用过程中可能出现的问题。 standard规范的中文文档 standard规范的github链接 pre-commit链接 Git commit规范我们进行commit操作时，填写的相关说明一定是要有意义的，我记得在学习编程的最开始，我们的对git的命令以及操作规范不清楚，所以commit的信息乱七八糟，经常是“解决冲突”、“修改bug”这样的说明，在被批评之后，也仅仅是commit信息不再胡写。 项目的commit message规范使用的是主流的Angular规范，在实际的团队开发中，通过对commit日志的规范，有助于代码的review、日志的自动化生成以及项目发版，同时能够很好地熟悉git工作流。在该项目中不涉及发版，只是简单的开发，所以只是遵循了部分规范，在实际工作中，如果团队刚好涉及到git工作流的规范，那肯定是要遵循的。 Git commit日志基本规范基础语法模板&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&lt;BLANK LINE&gt;&lt;body&gt;&lt;BLANK LINE&gt;&lt;footer&gt; 规范的基本说明：type代表本次提交的类型，是新增feature还是修复bug或是修改文档等，主要类型及其说明如下： feat：新增feature fix: 修复bug docs: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等 style: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑 refactor: 代码重构，没有加新功能或者修复bug perf: 优化相关，比如提升性能、体验 test: 测试用例，包括单元测试、集成测试等 chore: 改变构建流程、或者增加依赖库、工具等 revert: 回滚到上一个版本 scope表明本次修改的范围或者模块，例如users。 subject是对变更内容的简要描述。 BLANK LINE不用说，就是字面意思的空白行。 body是对本次变更更加详细的说明，可以是发起本次变更的原因以及本次变更的解决思路和方法等。 footer处填写相关连接。 格式要求：# 标题行：50个字符以内，描述主要变更内容# （我是空行）# 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括:# （我是空行）# * 为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等# * 他如何解决这个问题? 具体描述解决问题的步骤# * 是否存在副作用、风险? ## 尾部：如果需要的话可以添加一个链接到issue地址或者其它文档，或者关闭某个issue。 相关参考Git commit message和工作流规范 API接口文档规范我写过的第一个接口文档，是word形式的，写了大概三个接口就受不了了，word写接口，太不舒服了，后来用showdoc工具写接口文档，好用了很多，但是没有很好地体现文档的维护记录，再后来，参加工作之后接触了解了apidoc，相对而言，它也算主流之一，使用简单并且支持多语言，所以就开始使用apidoc作为生成接口文档的工具，接口文档在代码中以注解的形式书写，然后通过apidoc的相关命令生成接口文档，配合git刚好可以很好地体现接口文档的维护记录。当然，还有其他选择，个人喜好而已。 apidoc编写接口示例代码实例：/** * @api &#123;POST&#125; /user create a user * @apiDescription 用户新增的接口 * @apiName 用户注册 * @apiGroup User * @apiUse userParams * @apiSuccessExample Success-Response: * &#123; * errorCode: 0, * status: 200, * data: &#123; * _id: '123', * name: 'morehao', * createdAt: '20180913', * updatedAt: '20180913', * lastLogin: '暂未登录' * &#125; * &#125; * @apiErrorExample &#123;json&#125; Error-Response: * &#123; * status: 200, * errorCode: 20100, * errorMsg: '该用户已经存在' * &#125;*/ 截图实例： 相关参考这里只确定API接口文档的生成方式，详细的使用后面也不会过多涉及，下面附上相关链接。 apidoc官方网站 apidoc文档的官方示例 下面附上项目的github地址： 项目地址 我的简书： 毛浩先生的简书博客]]></content>
      <categories>
        <category>Node.js学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Node+Express搭建个人博客（纯后端）-前言（一）]]></title>
    <url>%2F2018%2F09%2F18%2FNode-Express%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E7%BA%AF%E5%90%8E%E7%AB%AF%EF%BC%89-%E5%89%8D%E8%A8%80%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[项目的目的是什么首先说明，项目的目的并不是写教程，我目前的水平还处于菜鸟级别，若有指正，菜鸟必改之。 我刚刚开始学习编程的时候，我的老师告诉我先做一个个人博客来练手，当时没怎么听，也只是走了个过场，刚好可以完成下当年没有做的博客。同时，通过完成个人博客项目，我想要把之前学习到的、接触到的和工作中使用到的经验，比如搭建基础的项目框架，比如代码规范和Git commit规范，比如路由分离，比如错误处理等等，尽可能地体现在这个功能简单的个人博客中。 总之，本项目的目的并不是要做多么酷炫的功能，也不是想要做什么教程，仅仅是个人经验的总结，希望即使是一个个人博客系统也可以像一个工程。当然，如果能够帮助到一些人，那也是极好的【手动捂脸】。 项目的预期我是一个【纯粹】的Node后端开发，说是纯粹，其实是菜，前端的东西，我看到就头大，目前也不太想花费精力去学习前端的东西，所以本项目完成之后，有的只是一个个人博客所拥有的基础功能的——一堆接口【手动捂脸】，我也尝试着使用iview提供的一套后台管理系统进行改写，写了几天之后，发现意义不大，我的想法并不是做一个完善的包含前后端的个人博客，所以也就放弃了。 所以，综上，你不会看到酷炫的功能，更看不到酷炫的页面，这里只会有一堆接口，当然，我会提供较为完善的接口文档，毕竟，接口文档也是项目开发过程中极为重要的一部分。 项目的结果虽然只是一个简单的纯后端的个人博客，但是在完成这个项目的过程中还是学习到不少的知识，也对有些曾经不太熟悉的东西有了新的认识，并且项目已经完成，可能还有一些地方需要完善，比如接口文档知识写了示例，比如测试代码也只是写了一个接口，这些不完善的地方，我应该还是会去完善的，不过，我是不定期完善【手动捂脸】。 下面附上项目的github地址： 项目地址 我的简书： 毛浩先生的简书博客]]></content>
      <categories>
        <category>Node.js学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Node回调函数改写]]></title>
    <url>%2F2018%2F06%2F26%2FNode%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E6%94%B9%E5%86%99%2F</url>
    <content type="text"><![CDATA[以读取文件为例，首先，创建文件a.txt，文件内写入内容Hello world!。 回调函数写法const fs = require('fs')fs.readFile('./a.txt', 'utf-8', (err, data) =&gt; &#123; if (err) throw err console.log(data)&#125;) Promise写法const fs = require('fs')function getTxt (path) &#123; return new Promise((resolve, reject) =&gt; &#123; fs.readFile(path, 'utf-8', (err, data) =&gt; &#123; if (err) reject(err) resolve(data) &#125;) &#125;)&#125;getTxt('./a.txt') .then(rst =&gt; console.log(rst)) bluebird写法const Promise = require('bluebird')const fs = Promise.promisifyAll(require('fs'))fs.readFileAsync('./a.txt', 'utf-8') .then(data =&gt; console.log(data)) Generator写法const fs = require('fs')function getTxt (path) &#123; return new Promise((resolve, reject) =&gt; &#123; fs.readFile(path, 'utf-8', (err, data) =&gt; &#123; if (err) reject(err) resolve(data) &#125;) &#125;)&#125;function * fun () &#123; yield getTxt('./a.txt')&#125;const run = fun()run.next().value.then(data =&gt; console.log(data)) async/await写法const fs = require('fs')function getTxt (path) &#123; return new Promise((resolve, reject) =&gt; &#123; fs.readFile(path, 'utf-8', (err, data) =&gt; &#123; if (err) reject(err) resolve(data) &#125;) &#125;)&#125;async function run (params) &#123; const file = await getTxt(params) console.log(file) return file&#125;run('./a.txt')]]></content>
      <categories>
        <category>Node.js学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用VScode断点调试Node.js]]></title>
    <url>%2F2018%2F05%2F09%2F%E4%BD%BF%E7%94%A8VScode%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95Node-js%2F</url>
    <content type="text"><![CDATA[这是个告别console的开始【手动捂脸】。 首先，打开虫子，进入调试页面。 点击绿色的按钮，开始调试。 选择环境Node.js。 选择完成之后，生成一个.vscode文件夹，文件夹下有个launch.json文件。 将【program】字段的值修改为自己程序的入口文件，开始调试时会从这个入口启动程序，我的程序的入口为server.js，修改如下： 修改完成后，点击绿色按钮，开始调试程序。 接下来用postman请求程序的接口，返现程序已经启动，并且返回了预期的数据。 接下来就是给程序设置断点，打开下想要设置断点的文件，我以刚才postman请求的用户详情接口为例，点击行号左边变为红点即设置好了断点。 再次请求用户详情接口，调试面板出现如下变化。其中划红线处按钮依次为继续、单步调试、单步跳出、重启、停止调试，在调试面板左侧可以监听变量和调用堆栈的情况等。 同时，将鼠标放在当前执行断点之前的参数或者变量上可以查看参数或者变量的详情。 好了，从此以后，就可以用VScode愉快地调试代码了。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
</search>
