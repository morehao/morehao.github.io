<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown语法学习]]></title>
    <url>%2F2018%2F07%2F23%2FMarkdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[我是一级标题我是二级标题字体我是斜体我是粗体 外链接我是毛浩先生博客的链接我是转义字符[链接](http://www.morehao.com/) 无序列表 我是无序列表1 我是无序列表2 我是无序列表3 有序列表 我是有序列表1 我是有序列表2 文字引用 我是被引用的文字 行内代码块我们是行内代码块、code 代码块我也是代码块，使用的是javascript 图片 我们是分隔线(三个及以上相应符号即可) 删除线我是删除线 注脚正文[^1] 表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 定义型列表定义1: 我是定义1 代办列表 代办事项 代办事项子项 已办事项 [^1]: 这是一个 注脚 的 文本。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Node回调函数改写]]></title>
    <url>%2F2018%2F06%2F26%2FNode%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E6%94%B9%E5%86%99%2F</url>
    <content type="text"><![CDATA[以读取文件为例，首先，创建文件a.txt，文件内写入内容Hello world!。 回调函数写法const fs = require('fs')fs.readFile('./a.txt', 'utf-8', (err, data) =&gt; &#123; if (err) throw err console.log(data)&#125;) Promise写法const fs = require('fs')function getTxt (path) &#123; return new Promise((resolve, reject) =&gt; &#123; fs.readFile(path, 'utf-8', (err, data) =&gt; &#123; if (err) reject(err) resolve(data) &#125;) &#125;)&#125;getTxt('./a.txt') .then(rst =&gt; console.log(rst)) bluebird写法const Promise = require('bluebird')const fs = Promise.promisifyAll(require('fs'))fs.readFileAsync('./a.txt', 'utf-8') .then(data =&gt; console.log(data)) Generator写法const fs = require('fs')function getTxt (path) &#123; return new Promise((resolve, reject) =&gt; &#123; fs.readFile(path, 'utf-8', (err, data) =&gt; &#123; if (err) reject(err) resolve(data) &#125;) &#125;)&#125;function * fun () &#123; yield getTxt('./a.txt')&#125;const run = fun()run.next().value.then(data =&gt; console.log(data)) async/await写法const fs = require('fs')function getTxt (path) &#123; return new Promise((resolve, reject) =&gt; &#123; fs.readFile(path, 'utf-8', (err, data) =&gt; &#123; if (err) reject(err) resolve(data) &#125;) &#125;)&#125;async function run (params) &#123; const file = await getTxt(params) console.log(file) return file&#125;run('./a.txt')]]></content>
      <categories>
        <category>Node.js学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用VScode断点调试Node.js]]></title>
    <url>%2F2018%2F05%2F09%2F%E4%BD%BF%E7%94%A8VScode%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95Node-js%2F</url>
    <content type="text"><![CDATA[这是个告别console的开始【手动捂脸】。 首先，打开虫子，进入调试页面。 点击绿色的按钮，开始调试。 选择环境Node.js。 选择完成之后，生成一个.vscode文件夹，文件夹下有个launch.json文件。 将【program】字段的值修改为自己程序的入口文件，开始调试时会从这个入口启动程序，我的程序的入口为server.js，修改如下： 修改完成后，点击绿色按钮，开始调试程序。 接下来用postman请求程序的接口，返现程序已经启动，并且返回了预期的数据。 接下来就是给程序设置断点，打开下想要设置断点的文件，我以刚才postman请求的用户详情接口为例，点击行号左边变为红点即设置好了断点。 再次请求用户详情接口，调试面板出现如下变化。其中划红线处按钮依次为继续、单步调试、单步跳出、重启、停止调试，在调试面板左侧可以监听变量和调用堆栈的情况等。 同时，将鼠标放在当前执行断点之前的参数或者变量上可以查看参数或者变量的详情。 好了，从此以后，就可以用VScode愉快地调试代码了。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
</search>
