<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Node+Express搭建个人博客（纯后端）-前言（一）]]></title>
    <url>%2F2018%2F09%2F18%2FNode-Express%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E7%BA%AF%E5%90%8E%E7%AB%AF%EF%BC%89-%E5%89%8D%E8%A8%80%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[项目的目的是什么首先说明，项目的目的并不是写教程，我目前的水平还处于菜鸟级别，若有指正，菜鸟必改之。 我刚刚开始学习编程的时候，我的老师告诉我先做一个个人博客来练手，当时没怎么听，也只是走了个过场，刚好可以完成下当年没有做的博客。同时，通过完成个人博客项目，我想要把之前学习到的、接触到的和工作中使用到的经验，比如搭建基础的项目框架，比如代码规范和Git commit规范，比如路由分离，比如错误处理等等，尽可能地体现在这个功能简单的个人博客中。 总之，本项目的目的并不是要做多么酷炫的功能，也不是想要做什么教程，仅仅是个人经验的总结，希望即使是一个个人博客系统也可以像一个工程。当然，如果能够帮助到一些人，那也是极好的【手动捂脸】。 项目的预期我是一个【纯粹】的Node后端开发，说是纯粹，其实是菜，前端的东西，我看到就头大，目前也不太想花费精力去学习前端的东西，所以本项目完成之后，有的只是一个个人博客所拥有的基础功能的——一堆接口【手动捂脸】，我也尝试着使用iview提供的一套后台管理系统进行改写，写了几天之后，发现意义不大，我的想法并不是做一个完善的包含前后端的个人博客，所以也就放弃了。 所以，综上，你不会看到酷炫的功能，更看不到酷炫的页面，这里只会有一堆接口，当然，我会提供较为完善的接口文档，毕竟，接口文档也是项目开发过程中极为重要的一部分。 项目的结果虽然只是一个简单的纯后端的个人博客，但是在完成这个项目的过程中还是学习到不少的知识，也对有些曾经不太熟悉的东西有了新的认识，并且项目已经完成，可能还有一些地方需要完善，比如接口文档知识写了示例，比如测试代码也只是写了一个接口，这些不完善的地方，我应该还是会去完善的，不过，我是不定期完善【手动捂脸】。 下面附上项目的github地址： 项目地址 我的简书： 毛浩先生的简书博客]]></content>
      <categories>
        <category>Node.js学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Node回调函数改写]]></title>
    <url>%2F2018%2F06%2F26%2FNode%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E6%94%B9%E5%86%99%2F</url>
    <content type="text"><![CDATA[以读取文件为例，首先，创建文件a.txt，文件内写入内容Hello world!。 回调函数写法const fs = require('fs')fs.readFile('./a.txt', 'utf-8', (err, data) =&gt; &#123; if (err) throw err console.log(data)&#125;) Promise写法const fs = require('fs')function getTxt (path) &#123; return new Promise((resolve, reject) =&gt; &#123; fs.readFile(path, 'utf-8', (err, data) =&gt; &#123; if (err) reject(err) resolve(data) &#125;) &#125;)&#125;getTxt('./a.txt') .then(rst =&gt; console.log(rst)) bluebird写法const Promise = require('bluebird')const fs = Promise.promisifyAll(require('fs'))fs.readFileAsync('./a.txt', 'utf-8') .then(data =&gt; console.log(data)) Generator写法const fs = require('fs')function getTxt (path) &#123; return new Promise((resolve, reject) =&gt; &#123; fs.readFile(path, 'utf-8', (err, data) =&gt; &#123; if (err) reject(err) resolve(data) &#125;) &#125;)&#125;function * fun () &#123; yield getTxt('./a.txt')&#125;const run = fun()run.next().value.then(data =&gt; console.log(data)) async/await写法const fs = require('fs')function getTxt (path) &#123; return new Promise((resolve, reject) =&gt; &#123; fs.readFile(path, 'utf-8', (err, data) =&gt; &#123; if (err) reject(err) resolve(data) &#125;) &#125;)&#125;async function run (params) &#123; const file = await getTxt(params) console.log(file) return file&#125;run('./a.txt')]]></content>
      <categories>
        <category>Node.js学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用VScode断点调试Node.js]]></title>
    <url>%2F2018%2F05%2F09%2F%E4%BD%BF%E7%94%A8VScode%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95Node-js%2F</url>
    <content type="text"><![CDATA[这是个告别console的开始【手动捂脸】。 首先，打开虫子，进入调试页面。 点击绿色的按钮，开始调试。 选择环境Node.js。 选择完成之后，生成一个.vscode文件夹，文件夹下有个launch.json文件。 将【program】字段的值修改为自己程序的入口文件，开始调试时会从这个入口启动程序，我的程序的入口为server.js，修改如下： 修改完成后，点击绿色按钮，开始调试程序。 接下来用postman请求程序的接口，返现程序已经启动，并且返回了预期的数据。 接下来就是给程序设置断点，打开下想要设置断点的文件，我以刚才postman请求的用户详情接口为例，点击行号左边变为红点即设置好了断点。 再次请求用户详情接口，调试面板出现如下变化。其中划红线处按钮依次为继续、单步调试、单步跳出、重启、停止调试，在调试面板左侧可以监听变量和调用堆栈的情况等。 同时，将鼠标放在当前执行断点之前的参数或者变量上可以查看参数或者变量的详情。 好了，从此以后，就可以用VScode愉快地调试代码了。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
  </entry>
</search>
